-- ======================================================================
-- ANTI-LAG V4 (SEGURO | SEM ESP DE PLAYER | SEM WALLHACK)
-- + ESP de "brainhots" (somente itens) para debug em lugar próprio/autorizado
-- Hadassa build — 2025-09-11
-- ======================================================================

-- ==================== CONFIG GERAL ====================
local CONFIG = {
    -- Anti-Lag
    ENABLE_ENV_OPTIMIZE     = true,    -- Otimizar ambiente (partes, meshes, luzes/partículas/decais)
    ENABLE_CHARACTER_TRIM   = true,   -- (Opcional) Simplificar skins de personagens (apenas cliente)
    ENABLE_LIGHTING_TWEAKS  = true,    -- Ajustes leves e reversíveis no Lighting
    ENABLE_SOUND_TWEAKS     = true,    -- Ajustes leves no SoundService

    SCAN_INTERVAL_SEC       = 3.0,     -- Intervalo base de varredura
    MAX_ITEMS_PER_TICK      = 400,     -- Orçamento de itens por ciclo (mantém FPS)
    DIST_LIMIT              = 500,     -- Só otimiza o que está a até X studs do jogador
    AGGRESSIVE_MODE         = false,   -- TRUE: destrói SurfaceAppearance/Decals/Textures/Particles/Luzes

    -- Materiais/cores “leves”
    TARGET_MATERIAL         = Enum.Material.SmoothPlastic,
    TARGET_COLOR            = Color3.fromRGB(163,162,165),

    -- Exclusões por nome/classe (não tocar)
    EXCLUDE_NAME_SUBSTR     = {"Door","Switch","Button","Lever","Spawn","Checkpoint","Portal","Teleporter","GUI","Billboard","Screen","Adornee"},
    EXCLUDE_CLASSES         = { "Tool", "Accessory", "Humanoid", "Animator", "Motor6D" },

    -- ====== ESP DE BRAINHOTS (DEBUG) ======
    ENABLE_BRAINHOT_ESP     = true,    -- Liga/desliga ESP dos brainhots
    BRAINHOT_SCAN_INTERVAL  = 3.0,     -- Segundos entre varreduras
    BRAINHOT_MAX_DISTANCE   = 220,     -- Raio máximo para marcar
    BRAINHOT_TAG            = "BrainhotESPTagged", -- Tag interna
    BRAINHOT_LABEL_OFFSET_Y = 3.2,     -- Altura do rótulo
}

-- Lista alvo (case-insensitive). Edite à vontade:
local BRAINHOT_NAMES = {
    "La Sahur Combinasion",
    "Graipuss Medussi",
    "Pot Hotspot",
    "Chicleteira Bicicleteira",
    "La Grande Combinasion",
    "Los Combinasionas",
    "Nuclearo Dinossauro",
    "La Karkerkar Combinasion",
    "Los Hotspotsitos",
    "Tralaledon",
    "Esok Sekolah",
    "Ketupat Kepat",
    "Los Bros",
    "La Supreme Combinasion",
    "Ketchuru and Musturu",
    "Garama and Madundung",
    "Spaghetti Tualetti",
    "Dragon Cannelloni",
    "Secret",
    "Lucky Block"
}

-- ==================== SERVICES ====================
local Players            = game:GetService("Players")
local RunService         = game:GetService("RunService")
local CollectionService  = game:GetService("CollectionService")
local Lighting           = game:GetService("Lighting")
local SoundService       = game:GetService("SoundService")
local LocalPlayer        = Players.LocalPlayer

-- ==================== ESTADO/CACHE ====================
-- (fracas nas chaves => GC automático quando o objeto some)
local processedParts     = setmetatable({}, {__mode="k"})
local processedModels    = setmetatable({}, {__mode="k"})
local processedSounds    = setmetatable({}, {__mode="k"})

local lastScan           = 0
local scanJitter         = 0

-- Brainhots ESP
local RED                = Color3.fromRGB(255, 0, 0)
local brainhotSet        = {}
local brainhotMarked     = setmetatable({}, {__mode = "k"})
local lastBrainhotScan   = 0

-- ==================== HELPERS ====================
local function safeLower(s) return string.lower(tostring(s or "")) end

local function norm(s)
    s = tostring(s or ""):gsub("%s+", " "):gsub("^%s*(.-)%s*$", "%1")
    return string.lower(s)
end

for _, n in ipairs(BRAINHOT_NAMES) do
    brainhotSet[norm(n)] = true
end

local function inBrainhotList(name)
    return brainhotSet[norm(name or "")]
end

local function shouldExcludeByName(name)
    local n = safeLower(name)
    for _, key in ipairs(CONFIG.EXCLUDE_NAME_SUBSTR) do
        if string.find(n, safeLower(key), 1, true) then
            return true
        end
    end
    return false
end

local function classInList(obj, classList)
    for _, c in ipairs(classList) do
        if obj:IsA(c) then return true end
    end
    return false
end

local function getLocalRoot()
    local c = LocalPlayer and LocalPlayer.Character
    return c and c:FindFirstChild("HumanoidRootPart") or nil
end

local function withinDistance(inst, limit)
    local root = getLocalRoot()
    if not root then return true end  -- durante respawn, deixa passar
    local part
    if inst:IsA("BasePart") then
        part = inst
    elseif inst:IsA("Model") then
        part = inst.PrimaryPart or inst:FindFirstChild("HumanoidRootPart") or inst:FindFirstChild("Head")
        if not part then
            for _,d in ipairs(inst:GetDescendants()) do
                if d:IsA("BasePart") then part = d break end
            end
        end
    end
    if not part then return false end
    local ok, dist = pcall(function() return (part.Position - root.Position).Magnitude end)
    return ok and dist <= (limit or CONFIG.DIST_LIMIT)
end

-- ==================== LIGHTING / SOUND TWEAKS ====================
local originalLighting = {}
local originalSound = {}

local function applyLightingTweaks()
    if not CONFIG.ENABLE_LIGHTING_TWEAKS then return end
    if next(originalLighting) == nil then
        originalLighting.GlobalShadows = Lighting.GlobalShadows
        originalLighting.EnvironmentDiffuseScale = Lighting.EnvironmentDiffuseScale
        originalLighting.EnvironmentSpecularScale = Lighting.EnvironmentSpecularScale
        originalLighting.Brightness = Lighting.Brightness
        originalLighting.Technology = Lighting.Technology
    end
    pcall(function()
        Lighting.GlobalShadows = false
        Lighting.EnvironmentDiffuseScale = 0
        Lighting.EnvironmentSpecularScale = 0
        Lighting.Brightness = math.clamp((Lighting.Brightness or 2) * 0.7, 1, 3)
    end)
end

local function applySoundTweaks()
    if not CONFIG.ENABLE_SOUND_TWEAKS then return end
    if next(originalSound) == nil then
        originalSound.DistanceFactor = SoundService.DistanceFactor
        originalSound.DopplerScale  = SoundService.DopplerScale
        originalSound.RolloffScale  = SoundService.RolloffScale
    end
    pcall(function()
        SoundService.DistanceFactor = 1
        SoundService.DopplerScale   = 0.5
        SoundService.RolloffScale   = 1
    end)
end

-- ==================== OTIMIZAÇÃO DE PERSONAGENS (OPCIONAL) ====================
local function simplifyCharacter(char)
    if not CONFIG.ENABLE_CHARACTER_TRIM or not char then return end
    for _, d in ipairs(char:GetDescendants()) do
        if d:IsA("ParticleEmitter") or d:IsA("Trail") or d:IsA("Beam") then
            if CONFIG.AGGRESSIVE_MODE then pcall(function() d:Destroy() end)
            else pcall(function() d.Enabled = false end) end
        elseif d:IsA("PointLight") or d:IsA("SpotLight") or d:IsA("SurfaceLight") then
            if CONFIG.AGGRESSIVE_MODE then pcall(function() d:Destroy() end)
            else pcall(function() d.Enabled = false end) end
        elseif d:IsA("SurfaceAppearance") then
            if CONFIG.AGGRESSIVE_MODE then pcall(function() d:Destroy() end) end
        elseif d:IsA("Decal") or d:IsA("Texture") then
            if CONFIG.AGGRESSIVE_MODE then pcall(function() d:Destroy() end)
            else pcall(function() d.Transparency = 1 end) end
        elseif d:IsA("MeshPart") then
            pcall(function()
                if CONFIG.AGGRESSIVE_MODE then d.TextureID = "" end
                d.Material = CONFIG.TARGET_MATERIAL
                d.CastShadow = false
            end)
        elseif d:IsA("BasePart") then
            pcall(function()
                d.Material = CONFIG.TARGET_MATERIAL
                d.CastShadow = false
                d.Reflectance = 0
            end)
        end
    end
end

local function hookPlayers()
    if not CONFIG.ENABLE_CHARACTER_TRIM then return end
    for _, pl in ipairs(Players:GetPlayers()) do
        if pl ~= LocalPlayer and pl.Character then simplifyCharacter(pl.Character) end
        pl.CharacterAdded:Connect(function(c) task.defer(simplifyCharacter, c) end)
    end
    Players.PlayerAdded:Connect(function(pl)
        pl.CharacterAdded:Connect(function(c) task.defer(simplifyCharacter, c) end)
    end)
end

-- ==================== OTIMIZAÇÃO DO AMBIENTE ====================
local function isSafeTarget(inst)
    if not inst or not inst.Parent then return false end
    if classInList(inst, CONFIG.EXCLUDE_CLASSES) then return false end
    if shouldExcludeByName(inst.Name) then return false end
    if inst:IsA("BillboardGui") or inst:IsA("SurfaceGui") or inst:IsA("ScreenGui") then
        return false
    end
    if inst:IsA("Tool") then return false end
    return true
end

local function softenVisualOfPart(part)
    if processedParts[part] then return end
    processedParts[part] = true

    -- 1) Reduções leves (reversíveis onde possível)
    pcall(function()
        part.CastShadow = false
        part.Reflectance = 0
        part.Material = CONFIG.TARGET_MATERIAL
        -- Não mexe em Transparency para não sumir objetos essenciais
    end)

    -- 2) Descendentes pesados
    for _, d in ipairs(part:GetDescendants()) do
        if d:IsA("ParticleEmitter") or d:IsA("Trail") or d:IsA("Beam") then
            if CONFIG.AGGRESSIVE_MODE then pcall(function() d:Destroy() end)
            else pcall(function() d.Enabled = false end) end
        elseif d:IsA("SurfaceAppearance") then
            if CONFIG.AGGRESSIVE_MODE then pcall(function() d:Destroy() end) end
        elseif d:IsA("Decal") or d:IsA("Texture") then
            if CONFIG.AGGRESSIVE_MODE then pcall(function() d:Destroy() end)
            else pcall(function() d.Transparency = 1 end) end
        elseif d:IsA("PointLight") or d:IsA("SpotLight") or d:IsA("SurfaceLight") then
            if CONFIG.AGGRESSIVE_MODE then pcall(function() d:Destroy() end)
            else pcall(function() d.Enabled = false end) end
        end
    end
end

local function softenModel(model)
    if processedModels[model] then return end
    processedModels[model] = true
    for _, d in ipairs(model:GetDescendants()) do
        if d:IsA("BasePart") and isSafeTarget(d) then
            softenVisualOfPart(d)
        end
    end
end

local function scanEnvironment()
    if not CONFIG.ENABLE_ENV_OPTIMIZE then return end
    local budget = CONFIG.MAX_ITEMS_PER_TICK

    for _, inst in ipairs(workspace:GetDescendants()) do
        if budget <= 0 then break end
        if not inst.Parent then continue end

        if inst:IsA("BasePart") then
            if not isSafeTarget(inst) then continue end
            if withinDistance(inst, CONFIG.DIST_LIMIT) and not processedParts[inst] then
                softenVisualOfPart(inst)
                budget -= 1
            end
        elseif inst:IsA("Model") then
            if not isSafeTarget(inst) then continue end
            if withinDistance(inst, CONFIG.DIST_LIMIT) and not processedModels[inst] then
                softenModel(inst)
                budget -= 20
            end
        end
    end
end

-- ==================== ESP DE BRAINHOTS (SOMENTE ITENS) ====================
local function getPrimary(inst)
    if inst:IsA("Model") then
        if inst.PrimaryPart then return inst.PrimaryPart end
        local head = inst:FindFirstChild("Head")
        if head and head:IsA("BasePart") then return head end
        for _,d in ipairs(inst:GetDescendants()) do
            if d:IsA("BasePart") then return d end
        end
    elseif inst:IsA("BasePart") then
        return inst
    end
    return nil
end

local function createBillboard(nameText)
    local bb = Instance.new("BillboardGui")
    bb.Name = "BrainhotNameBB"
    bb.Size = UDim2.new(0, 200, 0, 50)
    bb.StudsOffset = Vector3.new(0, CONFIG.BRAINHOT_LABEL_OFFSET_Y, 0)
    bb.AlwaysOnTop = true
    bb.MaxDistance = CONFIG.BRAINHOT_MAX_DISTANCE

    local tl = Instance.new("TextLabel")
    tl.Name = "Label"
    tl.BackgroundTransparency = 1
    tl.Size = UDim2.new(1, 0, 1, 0)
    tl.TextScaled = true
    tl.Font = Enum.Font.GothamBold
    tl.Text = nameText or "Brainhot"
    tl.TextColor3 = Color3.new(1,1,1)
    tl.TextStrokeTransparency = 0.5
    tl.Parent = bb

    return bb
end

local function createHighlight()
    local hl = Instance.new("Highlight")
    hl.Name = "BrainhotHL"
    hl.FillTransparency = 1
    hl.OutlineTransparency = 0
    hl.OutlineColor = RED
    hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    return hl
end

local function attachBrainhotMarkers(targetInst)
    if not targetInst or not targetInst.Parent then return end
    if CollectionService:HasTag(targetInst, CONFIG.BRAINHOT_TAG) then return end

    local primary = getPrimary(targetInst)
    if not primary then return end

    local hl = createHighlight()
    hl.Parent = targetInst
    hl.Adornee = targetInst

    local bb = createBillboard(targetInst.Name)
    bb.Parent = primary

    CollectionService:AddTag(targetInst, CONFIG.BRAINHOT_TAG)
    brainhotMarked[targetInst] = {hl = hl, bb = bb, primary = primary}

    targetInst.AncestryChanged:Connect(function(_, parent)
        if not parent then
            pcall(function() if bb and bb.Parent then bb:Destroy() end end)
            pcall(function() if hl and hl.Parent then hl:Destroy() end end)
            pcall(function() CollectionService:RemoveTag(targetInst, CONFIG.BRAINHOT_TAG) end)
            brainhotMarked[targetInst] = nil
        end
    end)
end

local function scanBrainhots()
    if not CONFIG.ENABLE_BRAINHOT_ESP then return end
    if (tick() - lastBrainhotScan) < CONFIG.BRAINHOT_SCAN_INTERVAL then return end
    lastBrainhotScan = tick()

    -- Varre por Models/Parts cujo nome esteja na lista alvo
    for _, inst in ipairs(workspace:GetDescendants()) do
        if (inst:IsA("Model") or inst:IsA("BasePart"))
            and not inst:IsA("Accessory")
            and not inst:IsA("Tool") then

            if inBrainhotList(inst.Name)
                and not CollectionService:HasTag(inst, CONFIG.BRAINHOT_TAG)
                and withinDistance(inst, CONFIG.BRAINHOT_MAX_DISTANCE) then
                attachBrainhotMarkers(inst)
            end
        end
    end

    -- Liga/desliga conforme distância (economia)
    for inst, pack in pairs(brainhotMarked) do
        if inst and inst.Parent then
            local visible = withinDistance(inst, CONFIG.BRAINHOT_MAX_DISTANCE)
            if pack.hl then pack.hl.Enabled = visible end
            if pack.bb then pack.bb.Enabled = visible end
        end
    end
end

-- ==================== LOOP ====================
applyLightingTweaks()
applySoundTweaks()
hookPlayers()

RunService.Heartbeat:Connect(function()
    local now = tick()
    -- Anti-Lag varre com jitter para evitar picos sincronizados
    if (now - lastScan) >= (CONFIG.SCAN_INTERVAL_SEC + scanJitter) then
        lastScan = now
        scanJitter = math.random() * 0.35
        scanEnvironment()
    end
    -- ESP de brainhots (somente itens)
    scanBrainhots()
end)

-- ==================== GARANTIA: REMOVER ESP DE PLAYER (se sobrou de versões antigas) ====================
for _, plr in ipairs(Players:GetPlayers()) do
    local c = plr.Character
    if c then
        local old = c:FindFirstChild("PlayerOutlineESP", true)
        if old then pcall(function() old:Destroy() end) end
    end
end
Players.PlayerAdded:Connect(function(plr)
    plr.CharacterAdded:Connect(function(c)
        local old = c:FindFirstChild("PlayerOutlineESP", true)
        if old then pcall(function() old:Destroy() end) end
    end)
end)

-- ==================== LOG ====================
print(("="):rep(56))
print("✓ ANTI-LAG V4 ATIVADO (sem ESP de player / sem wallhack)")
print(("→ Varredura a cada ~%.1fs, orçamento: %d itens/ciclo"):format(CONFIG.SCAN_INTERVAL_SEC, CONFIG.MAX_ITEMS_PER_TICK))
print("→ Distância limite p/ otimização: " .. tostring(CONFIG.DIST_LIMIT) .. " studs")
print("→ Modo AGRESSIVO: " .. (CONFIG.AGGRESSIVE_MODE and "LIGADO (remove visuais pesados)" or "DESLIGADO (reversível)"))
print("→ Character trim: " .. (CONFIG.ENABLE_CHARACTER_TRIM and "ATIVO" or "INATIVO"))
print("→ Brainhot ESP: " .. (CONFIG.ENABLE_BRAINHOT_ESP and "ATIVO" or "INATIVO"))
print(("="):rep(56))
